generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    ADMIN
    STAFF
}

enum InvoiceStatus {
    DRAFT
    SENT
    PAID
    OVERDUE
    CANCELED
}

model User {
    id           String     @id @default(cuid())
    name         String?
    email        String?    @unique
    passwordHash String?
    role         Role       @default(STAFF)
    customers    Customer[] @relation("UserCustomers")
    products     Product[]  @relation("UserProducts")
    invoices     Invoice[]  @relation("UserInvoices")
    accounts     Account[]
    sessions     Session[]
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
}

model Customer {
    id        String    @id @default(cuid())
    userId    String
    user      User      @relation("UserCustomers", fields: [userId], references: [id], onDelete: Cascade)
    name      String
    email     String?
    phone     String?
    address   String?
    notes     String?
    invoices  Invoice[] @relation("CustomerInvoices")
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    @@unique([userId, email])
    @@index([userId])
}

model Product {
    id            String        @id @default(cuid())
    userId        String
    user          User          @relation("UserProducts", fields: [userId], references: [id], onDelete: Cascade)
    name          String
    sku           String?
    description   String?
    unitPrice     Decimal       @db.Decimal(12, 2)
    stockQuantity Int           @default(0)
    invoiceItems  InvoiceItem[]
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt

    @@unique([userId, sku])
    @@index([userId])
}

model Invoice {
    id            String        @id @default(cuid())
    userId        String
    user          User          @relation("UserInvoices", fields: [userId], references: [id], onDelete: Cascade)
    customerId    String
    customer      Customer      @relation("CustomerInvoices", fields: [customerId], references: [id], onDelete: Restrict)
    invoiceNumber String        @unique
    status        InvoiceStatus @default(DRAFT)
    dueDate       DateTime?
    totalAmount   Decimal       @default(0) @db.Decimal(12, 2)
    items         InvoiceItem[]
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt

    @@unique([userId, invoiceNumber])
    @@index([userId])
    @@index([customerId])
    @@index([status, dueDate])
}

model InvoiceItem {
    id          String   @id @default(cuid())
    invoiceId   String
    invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
    productId   String?
    product     Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
    description String?
    quantity    Int      @default(1)
    unitPrice   Decimal  @db.Decimal(12, 2)
    lineTotal   Decimal  @db.Decimal(12, 2)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@index([invoiceId])
    @@index([productId])
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
